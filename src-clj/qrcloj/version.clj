(ns qrcloj.version
  (:use [qrcloj.utils :only [positions dec-to-bin]]
        [qrcloj.error-correction :only [poly-rem]]))


(defn dim [version] (+ 17 (* 4 version)))

(def from-data {
  :numeric {
    :L [41 77 127 187 255 322 370 461 552 652 772 883 1022 1101 1250 1408 1548
          1725 1903 2061 2232 2409 2620 2812 3057 3283 3517 3669 3909 4158
          4417 4686 4965 5253 5529 5836 6153 6479 6743 7089]
    :M [34 63 101 149 202 255 293 365 432 513 604 691 796 871 991 1082 1212
          1346 1500 1600 1708 1872 2059 2188 2395 2544 2701 2857 3035 3289
          3486 3693 3909 4134 4343 4588 4776 5039 5313 5596]
    :Q [27 48 77 111 144 178 207 259 312 364 427 489 580 621 703 775 876
          948 1063 1159 1224 1358 1468 1588 1718 1804 1933 2085 2181 2358
          2473 2670 2805 2949 3081 3244 3417 3599 3791 3993]
    :H [17 34 58 82 106 139 154 202 235 288 331 374 427 468 530 602 674
          746 813 919 969 1056 1108 1228 1286 1425 1501 1581 1677 1782
          1897 2022 2157 2301 2361 2524 2625 2735 2927 3057]
  }
  :alphanumeric {
    :L [25 47 77 114 154 195 224 279 335 395 468 535 619 667 758 854 938
          1046 1153 1249 1352 1460 1588 1704 1853 1990 2132 2223 2369 2520
          2677 2840 3009 3183 3351 3537 3729 3927 4087 4296]
    :M [20 38 61 90 122 154 178 221 262 311 366 419 483 528 600 656 734
          816 909 970 1035 1134 1248 1326 1451 1542 1637 1732 1839 1994
          2113 2238 2369 2506 2632 2780 2894 3054 3220 3391]
    :Q [16 29 47 67 87 108 125 157 189 221 259 296 352 376 426 470 531
          574 702 742 823 890 963 1041 1094 1172 1263 1322 1429
          1499 1618 1700 1787 1867 1966 2071 2181 2298 2420]
    :H [20 35 50 64 84 93 122 143 174 200 227 259 283 321 365 408
          452 493 557 587 640 672 744 779 864 910 958 1016 1080
          1150 1226 1307 1394 1431 1530 1591 1658 1774 1852]
  }
  :byte {
    :L [17 32 53 78 106 134 154 192 230 271 321 367 425 458 520 586 644 718 792
        858 929 1003 1091 1171 1273 1367 1475 1528 1628 1732 1840 1952 2068 2188
        2303 2431 2563 2699 2809 2953]
    :M [14 26 42 62 84 106 122 152 180 213 251 287 331 362 412 450 504 560 624
        666 711 779 857 911 997 1059 1125 1190 1264 1370 1452 1538 1628 1722 1809 1911
        1989 2099 2213 2331]
    :Q [11 20 32 46 60 74 86 108 130 151 177 203 241 258 292 322 364 394 442
        482 509 565 611 61 715 751 805 868 908 982 1030 1112 1168 1228 1283
        1351 1423 1499 1579 1663]
    :H [7 14 24 34 44 58 64 84 98 119 137 155 177 194 220 250 280 310 338 382
        403 439 461 511 535 593 625 658 698 742 790 842 898 958 983 1051
        1093 1139 1219 1273]
  }})

(def data-capacity-by-ecl {
  :L [19 34 55 80 108 136 156 194 232 274 324 370 428 461 523 589
      647 721 795 861 932 1006 1094 1174 1276 1370 1468 1531 1631
      1735 1843 1955 2071 2191 2306 2434 2566 2702 2812 2956]
  :M [16 28 44 64  86 108 124 154 182 216 254 290 334 365 415 453
      507 563 627 669 714 782 860 914 1000 1062 1128 1193 1267
      1373 1455 1541 1631 1725 1812 1914 1992 2102 2216 2334]
  :Q [13 22 34 48  62  76  88 110 132 154 180 206 244 261 295 325
      367 397 445 485 512 568 614 664 718 754 808 871 911 985
      1033 1115 1171 1231 1286 1354 1426 1502 1582 1666]
  :H [ 9 16 26 36  46  60  66  86 100 122 140 158 180 197 223 253
      283 313 341 385 406 442 464 514 538 596 628 661 701 745
      793 845 901 961 986 1054 1096 1142 1222 1276]
  })


(defn best-fit [mode ecl data]
  (let [idx (first (positions (fn [[f s]] (when (and (> (count data) f) (<= (count data) s)) s))
    (partition 2 1 (conj (seq ((from-data mode) ecl)) 0))))]
  {:ecl ecl :version (inc idx) :limit (((from-data mode) ecl) idx)}))


(def bit-capacity-by-ecl (into {} 
  (for [[ecl versions] data-capacity-by-ecl]
    [ecl (vec (map (partial * 8) versions))])))


(defn bit-capacity [{:keys [version ecl]}]
  ((bit-capacity-by-ecl ecl) (dec version)))


(defn raw-error-correction-layouts [{:keys [version ecl]}] (({
  :L [[1 [26 19]] [1 [44 34]] [1 [70 55]] [1 [100 80]] [1 [134 108]]
      [2 [86 68]] [2 [98 78]] [2 [121 97]] [2 [146 116]] [2 [86 68] 2 [87 69]]
      [4 [101 81]] [2 [116 92] 2 [117 93]] [4 [133 107]] [3 [145 115] 1 [146 116]] [5 [109 87] 1 [110 88]]
      [5 [122 98] 1 [123 99]] [1 [135 107] 5 [136 108]] [5 [150 120] 1 [151 121]] [3 [141 113] 4 [142 114]]
      [3 [135 107] 5 [136 108]] [4 [144 116] 4 [145 117]] [2 [139 111] 7 [140 112]]
      [4 [151 121] 5 [152 122]] [6 [147 117] 4 [148 118]] [8 [132 106] 4 [133 107]]
      [10 [142 114] 2 [143 115]] [8 [152 122] 4 [153 123]] [3 [147 117] 10 [148 118]]
      [7 [146 116] 7 [147 117]] [5 [145 115] 10 [146 116]] [13 [145 115] 3 [146 116]]
      [17 [145 115]] [17 [145 115] 1 [146 116]] [13 [145 115] 6 [146 116]]
      [12 [151 121] 7 [152 122]] [6 [151 121] 14 [152 122]] [17 [152 122] 4 [153 123]]
      [4 [152 122] 18 [153 123]] [20 [147 117] 4 [148 118]] [19 [148 118] 6 [149 119]]]

  :M [[1 [26 16]] [1 [44 28]] [1 [70 44]] [2 [50 32]] [2 [67 43]]
      [4 [43 27]] [4 [49 31]] [2 [60 38] 2 [61 39]] [3 [58 36] 2 [59 37]] [4 [69 43] 1 [70 44]]
      [1 [80 50] 4 [81 51]] [6 [58 36] 2 [59 37]] [8 [59 37] 1 [60 38]] [4 [64 40] 5 [65 41]] [5 [65 41] 5 [66 42]]
      [7 [73 45] 3 [74 46]] [10 [74 46] 1 [75 47]] [9 [69 43] 4 [70 44]] [3 [70 44] 11 [71 45]] 
      [3 [67 41] 13 [68 42]] [17 [68 42] 17 [50 22]] [17 [74 46]] [4 [75 47] 14 [76 48]]
      [6 [73 45] 14 [74 46]] [8 [75 47] 13 [76 48]] [19 [74 46] 4 [75 47]] [22 [73 45] 3 [74 46]]
      [3 [73 45] 23 [74 46]] [21 [73 45] 7 [74 46]] [19 [75 47] 10 [76 48]]
      [2 [74 46] 29 [75 47]] [10 [74 46] 23 [75 47]] [14 [74 46] 21 [75 47]]
      [14 [74 46] 23 [75 47]] [12 [75 47] 26 [75 48]] [6 [75 47] 34 [76 48]] [29 [74 46] 14 [75 47]]
      [13 [74 46] 32 [75 47]] [40 [75 47] 7 [76 48]] [18 [75 48] 31 [76 48]]]

  :Q [[1 [26 13]] [1 [44 22]] [2 [35 17]] [2 [50 24]] [2 [33 15] 2 [34 16]]
      [4 [43 19]] [2 [32 14] 4 [33 15]] [4 [40 18] 2 [41 19]] [4 [36 16] 4 [37 17]] [6 [43 19] 2 [44 20]]
      [4 [50 22] 4 [51 23]] [4 [46 20] 6 [47 21]] [8 [44 20] 4 [45 21]] [11 [36 16] 5 [37 17]] 
      [5 [54 24] 7 [55 25]] [15 [43 19] 2 [44 20]] [1 [50 22] 15 [51 23]] [17 [50 22] 1 [51 23]] 
      [17 [47 21] 4 [48 22]] [15 [54 24] 5 [55 25]] [17 [50 22] 6 [51 23]] [7 [54 24] 16 [55 25]]
      [11 [54 24] 14 [55 25]] [11 [54 24] 16 [55 25]] [7 [54 24] 22 [55 25]] [28 [50 22] 6 [51 23]]
      [8 [53 23] 26 [54 24]] [4 [54 24] 31 [55 25]] [1 [53 23] 37 [54 24]] [15 [54 24] 25 [55 25]]
      [42 [54 24] 1 [55 25]] [10 [54 24] 35 [55 25]] [29 [54 24] 19 [55 25]] [44 [54 24] 7 [55 25]]
      [39 [54 24] 14 [55 25]] [46 [54 24] 10 [55 25]] [49 [54 24] 10 [55 25]]
      [48 [54 24] 14 [55 25]] [43 [54 24] 22 [55 25]] [34 [54 24] 34 [55 25]]]

  :H [[1 [26 9]] [1 [44 16]] [2 [35 13]] [4 [25 9]] [2 [33 11] 2 [34 12]]
      [4 [43 15]] [4 [39 13] 1 [40 14]] [4 [40 14] 2 [41 15]] [4 [36 12] 4 [37 13]] [6 [43 15] 2 [44 16]]
      [3 [36 12] 8 [37 13]] [7 [42 14] 4 [43 15]] [12 [33 11] 4 [34 12]] [11 [36 12] 5 [37 13]] 
      [11 [36 12] 7 [37 13]] [3 [45 15] 13 [46 16]] [2 [42 14] 17 [43 15]] [2 [42 14] 19 [43 15]]
      [9 [39 13] 16 [40 14]] [15 [43 15] 10 [44 16]] [19 [46 16] 6 [47 17]] [16 [55 25] 34 [37 13]]
      [16 [45 15] 14 [46 16]] [30 [46 16] 2 [47 17]] [22 [45 15] 13 [46 16]]
      [33 [46 16] 4 [47 17]] [12 [45 15] 28 [46 16]] [11 [45 15] 31 [46 16]] [19 [45 15] 26 [46 16]]
      [23 [45 15] 25 [46 16]] [23 [45 15] 28 [46 16]] [19 [45 15] 35 [46 16]] [11 [45 15] 46 [46 16]]
      [59 [46 16] 1 [47 17]] [22 [45 15] 41 [46 16]] [2 [45 15] 64 [46 16]] [24 [45 15] 46 [46 16]]
      [42 [45 15] 32 [46 16]] [10 [45 15] 67 [46 16]] [20 [45 15] 61 [46 16]]]

  } ecl) (dec version)))

(defn error-correction-layout [{:keys [version ecl] :as ver}]
  (apply concat (map (fn [[ct [total data]]] (repeat ct [data (- total data)]))
    (partition 2 (raw-error-correction-layouts ver)))))

(defn indicator [version]
  (let [data (dec-to-bin 6 version)
        generator [1 1 1 1 1 0 0 1 0 0 1 0 1]]
    (reverse (concat data (poly-rem data generator)))))


(defn upper-right-modules [dim]
  (for [y (range 6) x (range (- dim 11) (- dim 8)) ] [x y]))
(defn lower-left-modules [dim]
  (map reverse (upper-right-modules dim)))


